Description: Create a variable number of EC2 instance resources.

Parameters:

  InstanceCount:

    Description: Number of EC2 instances (must be between 1 and 10).

    Type: Number

    Default: 1

    MinValue: 1

    MaxValue: 70

    ConstraintDescription: Must be a number between 1 and 10.

  ImageId:

    Description: Image ID to launch EC2 instances. ami-0375509cb0f20726e-Win 7 32, ami-0fd9f2ff35ef055ac-Win 7 x64, ami-0897a3ec20d08c2a1-Win 10 x64.

    Type: 'AWS::EC2::Image::Id'

    Default: ami-0897a3ec20d08c2a1

    AllowedValues:

      - ami-0375509cb0f20726e

      - ami-0fd9f2ff35ef055ac

      - ami-0897a3ec20d08c2a1

  InstanceType:

    Description: Instance type to launch EC2 instances.

    Type: String

    Default: t2.medium

    AllowedValues:

      - t2.micro

      - t2.small

      - t2.medium

      - t2.large

  SubnetId:

    Description: Please select a subnet that your EC2 instance will be placed in.

    Type: String

    Default: subnet-4dda2f72

    AllowedValues:

      - subnet-4dda2f72

      - subnet-a8eba3a4

Resources:

  EC2Instances:

    Type: 'Custom::EC2Instances'

    Properties:

      ServiceToken: !GetAtt 

        - EC2InstancesFunction

        - Arn

      ImageId: !Ref ImageId

      InstanceType: !Ref InstanceType

      MinCount: !Ref InstanceCount

      MaxCount: !Ref InstanceCount

      SubnetId:  !Ref SubnetId

      SecurityGroupIds:

        - sg-898006fa

        - sg-96262de5

        - sg-881c19f8

        - sg-134e7463

  EC2InstancesFunction:

    Type: 'AWS::Lambda::Function'

    Properties:

      Handler: index.handler

      Role: !GetAtt 

        - LambdaExecutionRole

        - Arn

      Code:

        ZipFile: !Sub |

          var response = require('cfn-response');

          var AWS = require('aws-sdk');

          exports.handler = function(event, context) {

            var physicalId = event.PhysicalResourceId || 'none';

            function success(data) {

              return response.send(event, context, response.SUCCESS, data, physicalId);

            }

            function failed(e) {

              return response.send(event, context, response.FAILED, e, physicalId);

            }

            var ec2 = new AWS.EC2();

            var instances;

            if (event.RequestType == 'Create') {

              var launchParams = event.ResourceProperties;

              delete launchParams.ServiceToken;

              ec2.runInstances(launchParams).promise().then((data)=> {

                instances = data.Instances.map((data)=> data.InstanceId);

                physicalId = instances.join(':');

                return ec2.waitFor('instanceRunning', {InstanceIds: instances}).promise();

              }).then((data)=> success({Instances: instances})

              ).catch((e)=> failed(e));

            } else if (event.RequestType == 'Delete') {

              if (physicalId == 'none') {return success({});}

              var deleteParams = {InstanceIds: physicalId.split(':')};

              ec2.terminateInstances(deleteParams).promise().then((data)=>

                ec2.waitFor('instanceTerminated', deleteParams).promise()

              ).then((data)=>success({})

              ).catch((e)=>failed(e));

            } else {

              return failed({Error: "In-place updates not supported."});

            }

          };

      Runtime: nodejs16.x

      Timeout: 300

  LambdaExecutionRole:

    Type: 'AWS::IAM::Role'

    Properties:

      AssumeRolePolicyDocument:

        Version: 2012-10-17

        Statement:

          - Effect: Allow

            Principal:

              Service:

                - lambda.amazonaws.com

            Action:

              - 'sts:AssumeRole'

      Path: /

      ManagedPolicyArns:

        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

      Policies:

        - PolicyName: EC2Policy

          PolicyDocument:

            Version: 2012-10-17

            Statement:

              - Effect: Allow

                Action:

                  - 'ec2:RunInstances'

                  - 'ec2:DescribeInstances'

                  - 'ec2:DescribeInstanceStatus'

                  - 'ec2:TerminateInstances'

                Resource:

                  - '*'

Outputs:

  Instances:

    Value: !Join 

      - ','

      - !GetAtt 

        - EC2Instances

        - Instances
