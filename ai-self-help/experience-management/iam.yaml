---
# Author: Brian Gaber
# AI SelfHelp Kinesis Cloudformation Template
# Stack can be created from the console or from the AWS CLI.
# If stack is created from the console then resources will be created in the region shown in the upper right.
# If stack is created from the AWS CLI then the region flag must be used or the stack will be created in the AWS default region (us-east-1).
# Example of creating stack from the AWS CLI:
# aws --region us-east-1 cloudformation create-stack --stack-name firehose-iam-stack --template-body file://cg3-s3-cf.json --parameters ParameterKey=ActualParamName,ParameterValue=ActualParamValue
# This CloudFormation Template will create the following resources:
# - IAM Policies for Kinesis Firehose
# - IAM Roles for Kinesis Firehose

Parameters:
  CreationDate:
    Description: Creation Date
    Type: String
    Default: "2023-12-06 09:00:00"
    AllowedPattern: "^\\d{4}(-\\d{2}){2} (\\d{2}:){2}\\d{2}$"
    ConstraintDescription: Date and time of creation
  CreatedBy:
    Description: Who executed this CloudFormation template
    Default: Brian Gaber
    Type: String
  Application:
    Description: Application Name
    Default: Experience Management
    Type: String
  Owner:
    Description: Application Owner
    Default: Trevor Kirk
    Type: String
  S3BucketName:
    Description: S3 Bucket Name
    Default: cc-xli-cw-logs-uat
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Tags"
        Parameters:
          - CreationDate
          - CreatedBy
          - Application
          - Owner
    ParameterLabels:
      S3BucketName:
        default: "What is the name of the XLI S3 bucket?"

Resources:
  FirehoseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: FirehosetoS3Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Permissions-Policy-For-Firehose
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: [
                  "s3:AbortMultipartUpload",
                  "s3:GetBucketLocation",
                  "s3:GetObject",
                  "s3:ListBucket",
                  "s3:ListBucketMultipartUploads",
                  "s3:PutObject"
                ]
                Resource: [
                  !Join ["", ["arn:aws:s3:::", !Ref S3BucketName] ],
                  !Join ["", ["arn:aws:s3:::", !Ref S3BucketName, "/*"] ]
                ]
                Sid: "S3Access"
              - Effect: Allow
                Action: [
                  "lambda:InvokeFunction",
                  "lambda:GetFunctionConfiguration"
                ]
                Resource: [
                  !Join [":", ["arn:aws:lambda", !Ref AWS::Region, !Ref AWS::AccountId, "function:FirehoseLogTransformation:$LATEST"]]
                ]
                Sid: "LambdaInvokeAccess"
      Tags: 
        - Key: Owner
          Value: !Ref Owner
        - Key: Application
          Value: !Ref Application
        - Key: Created
          Value: !Ref CreationDate
        - Key: Creator
          Value: !Ref CreatedBy

  CWLtoKinesisFirehoseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CWLtoKinesisFirehoseRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Join [".", ["logs", !Ref AWS::Region, "amazonaws.com"]]
            Action:
              - 'sts:AssumeRole'
      Path: /
      Tags: 
        - Key: Owner
          Value: !Ref Owner
        - Key: Application
          Value: !Ref Application
        - Key: Created
          Value: !Ref CreationDate
        - Key: Creator
          Value: !Ref CreatedBy

  CWLtoKinesisFirehosePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: FirehoseAccess1
            Effect: Allow
            Action: firehose:ListDeliveryStreams
            Resource: "*"
          - Sid: Passrole
            Effect: Allow
            Action: iam:PassRole
            Resource: !GetAtt CWLtoKinesisFirehoseRole.Arn
          - Sid: FirehoseAccess2
            Effect: Allow
            Action:
              - firehose:DescribeDeliveryStream
              - firehose:PutRecord
              - firehose:PutRecordBatch
            Resource:
              - !Join [":", ["arn:aws:firehose", !Ref AWS::Region, !Ref AWS::AccountId, "deliverystream/exp-mgt-connect-delivery-stream"]]
              - !Join [":", ["arn:aws:firehose", !Ref AWS::Region, !Ref AWS::AccountId, "deliverystream/exp-mgt-kendra-delivery-stream"]]
              - !Join [":", ["arn:aws:firehose", !Ref AWS::Region, !Ref AWS::AccountId, "deliverystream/exp-mgt-lex-delivery-stream"]]
              - !Join [":", ["arn:aws:firehose", !Ref AWS::Region, !Ref AWS::AccountId, "deliverystream/exp-mgt-twilio-delivery-stream"]]
        Version: "2012-10-17"
      PolicyName: Permissions-Policy-For-CWL
      Roles:
        - Ref: CWLtoKinesisFirehoseRole

Outputs:
  FirehoseRoleARN:
    Description: Kinesis Firehose Delivery Stream Role ARN
    Value: !GetAtt FirehoseRole.Arn
    Export:
      Name: ExFirehoseRoleARN
  CWLtoKinesisFirehoseRoleARN:
    Description: CloudWatch Logs to Kinesis Firehose Role ARN
    Value: !GetAtt CWLtoKinesisFirehoseRole.Arn
    Export:
      Name: ExCWLtoKinesisFirehoseRole